# Importing the necessary libraries :
import streamlit as st
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import seaborn as sns
import pandas as pd
from io import StringIO
import os
import re

# D√©finir le r√©pertoire de travail au dossier du script
script_dir = os.path.dirname(__file__)  # Obtient le dossier o√π se trouve le script
os.chdir(script_dir)  # Change le r√©pertoire de travail au dossier du script

bdd = pd.read_csv('BDD_virgules.csv', sep=';', engine='python')

st.set_page_config(page_title="Patinage de vitesse courte piste", page_icon="‚õ∏Ô∏è") # Set the page title and icon using st.set_page_config

# Define a function for each page
def page_home():
    st.title('Analyse de vitesse de patineurs de vitesse courte piste') # Main title
    image_path = "./PVCP_couverture.jpg"# Main image 
    st.image(image_path) # Display the image with a caption

    st.header("‚õ∏Ô∏è Le patinage de vitesse courte piste")
    st.write("""Le patinage de vitesse courte piste est une discipline qui remonte au d√©but du XX√®me si√®cle en 
                Am√©rique du Nord. Les premi√®res comp√©titions internationales ont eu lieu dans les ann√©es 1970, et 
                la discipline a √©t√© ajout√©e au programme des Jeux Olympiques en 1992. Dans les premi√®res ann√©es, 
                le Canada et les √âtats-Unis dominaient le palmar√®s, mais aujourd‚Äôhui des pays comme les Pays-Bas, 
                l‚ÄôItalie et la Cor√©e du Sud s‚Äôimposent dans les classements. Cette discipline se distingue du patinage 
                de vitesse longue piste par des virages plus serr√©s, des lignes droites plus courtes et un d√©part group√©
                [4]. 
                Le patinage de vitesse courte piste se d√©roule sur une piste ovale de 111.12m dessin√©e sur une 
                patinoire standard de hockey. Les lignes de d√©part et d‚Äôarriv√©e sont marqu√©es au milieu des lignes 
                droites. L‚Äôint√©rieur de la piste est d√©limit√© par des lignes bleues en ligne droite et par 7 c√¥nes en 
                caoutchouc dans les virages, celui du milieu repr√©sentant l‚Äôapex, c‚Äôest-√†-dire le centre du virage [4].
                Ces caract√©ristiques sont repr√©sent√©es dans le sch√©ma en figure 3.
        """)

    
    st.header("‚ö°Le patinage de vitesse courte piste : un sport √† risque") 
    st.write("Paragraphe sur les risques du sport...")

    st.header("üìä Nombre de chutes par pays")

    def display_fall_statistics(bdd):
        # Filtrer les donn√©es pour compter seulement les lignes o√π une chute est survenue
        fall_data = bdd[bdd['Fall / Out of track'] == 'Fall']

        # Compter le nombre de chutes par pays
        fall_counts = fall_data['Country'].value_counts().reset_index()
        fall_counts.columns = ['Country', 'Number of Falls']

        # Cr√©er un graphique √† barres pour le nombre de chutes par pays
        plt.figure(figsize=(10, 8))
        sns.barplot(x='Number of Falls', y='Country', data=fall_counts, palette='viridis')
        plt.title('Nombre de Chutes par Pays')
        plt.xlabel('Nombre de Chutes')
        plt.ylabel('Pays')
        st.pyplot(plt)
    
    display_fall_statistics(bdd)
   
    # Footer
    st.markdown('---')
    st.markdown('**Author:** INS Qu√©bec (https://www.insquebec.org/)')
    st.markdown('**Date:** mai 2024')


def page_statistiques(df=None):
    st.title("Bienvenue sur la page d'analyse des donn√©es recueillies")
    st.write("Voici la base de donn√©es sur laquelle nous avons travaill√© :")

    st.write(bdd)

    st.write("Les chutes sur lesquelles on a pu calculer une vitesse d'impact :")

    bdd['Impact speed mean'] = bdd['Impact speed mean'].str.replace(',', '.')
    # Convertir les valeurs de 'Impact speed mean' en num√©riques, non num√©riques deviennent NaN
    bdd['Impact speed mean'] = pd.to_numeric(bdd['Impact speed mean'], errors='coerce')
    # Filtrer pour garder seulement les rang√©es avec des valeurs num√©riques dans 'Impact speed mean'
    bdd_mspeed = bdd[bdd['Impact speed mean'].notna()]

    st.write(bdd_mspeed)

    # def display_impactspeed_impactzone(bdd):

    #     # Fonction pour s√©parer les combinaisons d'impact
    #     def split_impact(impact):
    #         if '+' in impact:
    #             return impact.split(' + ')
    #         else:
    #             return [impact]

    #     # Appliquer la fonction pour chaque impact et √©tendre le DataFrame
    #     first_impacts = bdd_mspeed['First impact'].apply(split_impact).explode().reset_index()
    #     second_impacts = bdd_mspeed['Second impact'].apply(split_impact).explode().reset_index()

    #     # Associer chaque impact √©clat√© avec sa vitesse et son type d'impact √† la t√™te
    #     first_impacts = first_impacts.join(bdd_mspeed[['Impact speed mean', 'Head impact']], on='index')
    #     second_impacts = second_impacts.join(bdd_mspeed[['Impact speed mean', 'Head impact']], on='index')

    #     # Cr√©er un scatter plot pour montrer les relations
    #     plt.figure(figsize=(10, 8))
    #     scatter_first = sns.scatterplot(x='Impact speed mean', y='First impact', data=bdd_mspeed, style='Head impact', hue='Head impact', s=100, palette='Blues', legend = "full") # on d√©sactive la l√©gende automatique
    #     scatter_second = sns.scatterplot(x='Impact speed mean', y='Second impact', data=bdd_mspeed, style='Head impact', hue='Head impact', s=100, palette='Reds', legend = "full")

    #     plt.title('Impact Speed vs. First and Second Impact Points with Head Impact Type')
    #     plt.xlabel('Impact Speed Mean (km/h)')
    #     plt.ylabel('Impact Point')
    #     plt.grid(True)
    #     plt.legend(title='Head Impact')
    #     st.pyplot(plt)

    # display_impactspeed_impactzone(bdd)

    def display_impactspeed_impactzone(bdd):
        def clean_label(label):
            if pd.isna(label):
                return 'No Data'
            else:
                return ' + '.join(word.capitalize() for word in str(label).split(' + '))

        def split_impact(impact):
            if pd.isna(impact):
                return []
            elif '+' in str(impact):
                return impact.split(' + ')
            else:
                return [impact]

        # Appliquer la fonction pour chaque impact et √©tendre le DataFrame
        bdd['First impact'] = bdd['First impact'].apply(clean_label).apply(split_impact).explode().reset_index(drop=True)
        bdd['Second impact'] = bdd['Second impact'].apply(clean_label).apply(split_impact).explode().reset_index(drop=True)

        # D√©finir l'ordre des cat√©gories
        ordered_categories = sorted(set(bdd['First impact'].dropna().unique()) | set(bdd['Second impact'].dropna().unique()))
        ordered_categories = [cat for cat in ordered_categories if cat not in ['No Data', 'None']] + ['None', 'No Data']

        # Convertir les cat√©gories en type cat√©gorique avec un ordre sp√©cifi√©
        bdd['First impact'] = pd.Categorical(bdd['First impact'], categories=ordered_categories, ordered=True)
        bdd['Second impact'] = pd.Categorical(bdd['Second impact'], categories=ordered_categories, ordered=True)

        # Trier le DataFrame selon la nouvelle colonne cat√©gorique pour assurer l'ordre dans le plot
        bdd.sort_values(by=['First impact', 'Second impact'], inplace=True)

        plt.figure(figsize=(10, 8))
        sns.scatterplot(x='Impact speed mean', y='First impact', data=bdd, style='Head impact', hue='Head impact', s=100, palette='Blues', legend="full")
        sns.scatterplot(x='Impact speed mean', y='Second impact', data=bdd, style='Head impact', hue='Head impact', s=100, palette='Reds', legend="full")

        plt.title('Impact Speed vs. First and Second Impact Points with Head Impact Type')
        plt.xlabel('Impact Speed Mean (km/h)')
        plt.ylabel('Impact Point')
        plt.grid(True)
        plt.legend(title='Head Impact')
        st.pyplot(plt)


    display_impactspeed_impactzone(bdd_mspeed)  

    # √©cris le 1er impact et le 2√®me impact pour chaque vitesse d'impact moyenne :
    st.write(bdd_mspeed[['Impact speed mean', 'First impact', 'Second impact']])

    st.write(" * Les signes bleus correspondent aux 1er impacts")
    st.write(" * Les signes rouges correspondent aux 2√®me impacts")

    def display_impact_speed_distribution(bdd):
        # Cr√©er un histogramme pour montrer la distribution de la vitesse d'impact
        plt.figure(figsize=(10, 8))
        sns.histplot(bdd['Impact speed mean'], kde=True, color='blue', bins=10)
        plt.title('Distribution of Impact Speed Mean')
        plt.xlabel('Impact Speed Mean (km/h)')
        plt.ylabel('Frequency')
        plt.grid(True)
        st.pyplot(plt)
    
    display_impact_speed_distribution(bdd)

    def display_impact_speed_by_head_impact(bdd):
        # Cr√©er un box plot pour montrer la vitesse d'impact en fonction du type de choc √† la t√™te
        plt.figure(figsize=(10, 8))
        sns.boxplot(x='Head impact', y='Impact speed mean', data=bdd, palette='viridis')
        plt.title('Impact Speed Mean by Head Impact Type')
        plt.xlabel('Head Impact Type')
        plt.ylabel('Impact Speed Mean (km/h)')
        st.pyplot(plt)

    display_impact_speed_by_head_impact(bdd)

    st.write("""Le graphique repr√©sente la distribution de la vitesse d'impact moyenne (en km/h) en fonction du type d'impact √† la t√™te lors de chutes en patinage de vitesse courte piste. Trois cat√©gories d'impact √† la t√™te sont observ√©es : aucun impact (None), impact indirect, et impact direct, avec une cat√©gorie suppl√©mentaire pour les cas o√π aucune donn√©e n'est disponible (No data). 
             √Ä partir du graphique, on peut observer que la vitesse d'impact moyenne pour les chutes avec un impact direct √† la t√™te est nettement plus √©lev√©e compar√©e √† celles avec un impact indirect ou aucun impact. Les chutes avec impact direct montrent aussi une plus grande variabilit√© dans les vitesses d'impact, comme l'indique la longueur de la bo√Æte et les extr√©mit√©s des moustaches. En revanche, les chutes sans aucun impact √† la t√™te pr√©sentent les vitesses les plus basses et la variabilit√© la plus faible.
             Ce graphique sugg√®re que les impacts directs √† la t√™te lors des chutes sont g√©n√©ralement associ√©s √† des vitesses d'impact plus √©lev√©es, ce qui pourrait indiquer un risque accru de blessures graves.
             """)

def page_mesures():
    st.title("Comment ont √©t√© fait les calculs ?")
    st.write("Analyse de vid√©os sur Kinov√©a")

# Menu
st.sidebar.title("Menu") # Layout the sidebar
page = st.sidebar.radio("Choisissez une page", ["Accueil", "Statistiques", "Mesures"])

# Display the selected page using a dictionary lookup to map between page name and function
pages = {
    "Accueil": page_home,
    "Statistiques": page_statistiques,
    "Mesures": page_mesures
}

# Call the app function associated with the selected page
if page in pages:
    pages[page]()

# home.py
def show():
    st.title("Accueil Page")
    #st.write("Welcome to the multi-page application.")

def show():
    st.title("Statistiques")
    #st.write("Here you can try your dress on")